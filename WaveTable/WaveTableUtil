/*
  ==============================================================================

    WaveTableUtil.h
    Created: 30 Nov 2017 11:28:43pm
    Author:  Claudio

  ==============================================================================
*/

#include <vector>
#include <algorithm>

#include "Wavetable.h"

#pragma once
class WaveTableUtil
{
	public:
		static WaveTable scaleWaveTable(const WaveTable &wave, float nMin, float nMax) {
			WaveTable out(wave.Length(), wave.Period());
			float max = *std::max_element(wave.Data().begin(), wave.Data().end());
			float min = *std::min_element(wave.Data().begin(), wave.Data().end());
			for (int i = 0; i < wave.Length(); i++) {
				out[i] = normalize(wave[i], min, max, nMin, nMax);
			}
			return out;
		}

		static std::vector<float> scaleWaveTableVector(const std::vector<float> &wave, float newMin, float newMax) {
			std::vector<float> out = wave;
			float cMax = *std::max_element(wave.begin(), wave.end());
			float cMin = *std::min_element(wave.begin(), wave.end());
			int size = wave.size();
			for (int i = 0; i < size; i++) {
				out[i] = normalize(wave[i], cMin, cMax, newMin, newMax);
			}
			return out;
		}

		static float normalize(float value, float cMin, float cMax, float nMin, float nMax) {
			return (nMax - nMin) * (value - cMin) / (cMax - cMin) + nMin;
		}

		static std::vector<float> cutWaveTableVector(const std::vector<float> &wavetable, float minCut, float maxCut) {
			std::vector<float> out = wavetable;
			int size = wavetable.size();
			for (int i = 0; i < size; i++) {
				float val = wavetable[i];
				if (val <= minCut) val = minCut;
				if (val >= maxCut) val = maxCut;
				out[i] = val;
			}
			return out;
		}

		static WaveTable cutWaveTable(const WaveTable &wave, float minCut, float maxCut) {
			WaveTable out(wave.Length(), wave.Period());
			for (int i = 0; i < wave.Length(); i++) {
				float val = wave[i];
				if (val <= minCut) val = minCut;
				if (val >= maxCut) val = maxCut;
				out[i] = val;
			}
			return out;
		}
};
