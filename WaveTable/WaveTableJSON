/*
  ==============================================================================

    WavetableJSON.h
    Created: 28 Nov 2017 11:03:39pm
    Author:  Claudio Stevanato

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include <vector>
#include <fstream>
#include <windows.data.json.h>

#include "Wavetable.h"

#pragma once

class WaveTableJSON : Wavetable
{
	public:
		WaveTableJSON(std::string wavetable_path, int wavetable_size) {
		std::vector<float> wavetable = readWavetableFromFileStandard(wavetable_path, wavetable_size);
		Wavetable(wavetable);
	}

		WaveTableJSON(String wavetable_path, int wavetable_size) {
		std::vector<float> wavetable = readWavetableFromFileJuce(wavetable_path, wavetable_size);
		Wavetable(wavetable);
	}

	static void writeWavetableToFileStandard(const std::vector<float> wavetable, std::string file_name, std::string description, std::string extension
		, std::string directory) {
		DynamicObject* jObj = new DynamicObject();
		jObj->setProperty("file_name", String::String(file_name));
		jObj->setProperty("extension", String::String(extension));
		jObj->setProperty("description", String::String(description));

		DynamicObject* waveObj = new DynamicObject();
		for (int i = 0; i<wavetable.size; i++) {
			waveObj->setProperty(String(i), wavetable.at(i));
		}

		jObj->setProperty("wave", waveObj);

		var json(jObj);
		String myJSONtoString = JSON::toString(json);

		File file(directory + file_name + "." + extension);

		FileOutputStream stream(file);

		if (!stream.openedOk()) {
			Logger::getCurrentLogger()->writeToLog("failed to open file stream");
			return;
		}

		stream.setPosition(0);
		stream.truncate();

		bool asUTF16 = true;
		bool byteOrderMark = true;

		stream.writeText(myJSONtoString, asUTF16, byteOrderMark);
	}

	static void writeWavetableToFileJuce(const Array<float> wavetable, String file_name, String description, String extension
		, String directory) {

		int wtSize = wavetable.size;

		DynamicObject* jObj = new DynamicObject();
		jObj->setProperty("file_name", file_name);
		jObj->setProperty("extension", extension);
		jObj->setProperty("description", description);

		DynamicObject* waveObj = new DynamicObject();
		for (int i = 0; i<wtSize; i++) {
			waveObj->setProperty(String(i), wavetable.getReference(i));
		}

		jObj->setProperty("wave", waveObj);

		var json(jObj);
		String myJSONtoString = JSON::toString(json);

		File file(directory + file_name + "." + extension);

		FileOutputStream stream(file);

		if (!stream.openedOk()) {
			Logger::getCurrentLogger()->writeToLog("failed to open file stream");
			return;
		}

		stream.setPosition(0);
		stream.truncate();

		bool asUTF16 = true;
		bool byteOrderMark = true;

		stream.writeText(myJSONtoString, asUTF16, byteOrderMark);
	}

	static std::vector<float> readWavetableFromFileStandard(std::string path, int wavetableSize) {

		std::vector<float> wavetableArray;

		File file(String::String(path));
		FileInputStream stream(file);

		if (!stream.openedOk()) {
			Logger::getCurrentLogger()->writeToLog("failed to open file stream");
			return wavetableArray;
		}

		String myJSONfromString = stream.readEntireStreamAsString();
		juce::var parsedJson;

		if (juce::JSON::parse(myJSONfromString, parsedJson).wasOk()) {
			for (int i = 0; i< wavetableSize; i++) {
				float waveValue = parsedJson["Wave"][String(i).toStdString().c_str()];
				wavetableArray.push_back(waveValue);
			}
		}
		return wavetableArray;
	}

	static std::vector<float> readWavetableFromFileJuce(String path, int wavetableSize) {

		std::vector<float> wavetableArray;

		File file(path);
		FileInputStream stream(file);

		if (!stream.openedOk()) {
			Logger::getCurrentLogger()->writeToLog("failed to open file stream");
			return wavetableArray;
		}

		String myJSONfromString = stream.readEntireStreamAsString();
		juce::var parsedJson;

		if (juce::JSON::parse(myJSONfromString, parsedJson).wasOk()) {
			for (int i = 0; i< wavetableSize; i++) {
				float waveValue = parsedJson["Wave"][String(i).toStdString().c_str()];
				wavetableArray.push_back(waveValue);
			}
		}
		return wavetableArray;
	}
};
